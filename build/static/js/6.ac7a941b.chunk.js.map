{"version":3,"sources":["Pages/chapter_3.tsx"],"names":["Chapter3","props","containerRef","React","state","this","current","width","clientWidth","height","clientHeight","renderer","WebGLRenderer","loader","GLTFLoader","scene","Scene","setSize","camera","PerspectiveCamera","position","set","lookAt","controls","OrbitControls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","autoRotate","appendChild","load","gltf","add","loading","console","log","loaded","total","error","alert","animate","requestAnimationFrame","update","render","id","ref","style"],"mappings":"2NAYqBA,E,YACnB,WAAYC,GAAwB,IAAD,8BACjC,4CAAMA,KAKAC,aAAeC,cAHrB,EAAKC,MAAQ,GAHoB,E,iFAQjC,GAAIC,KAAKH,aAAaI,QAAS,CAC7B,IAAIC,EAAQF,KAAKH,aAAaI,QAAQE,YAClCC,EAASJ,KAAKH,aAAaI,QAAQI,aACnCC,EAAW,IAAIC,KACfC,EAAS,IAAIC,IACbC,EAAQ,IAAIC,IAChBL,EAASM,QAAQV,EAAOE,GACxB,IAAIS,EAAS,IAAIC,IAAkB,GAAIZ,EAAQE,EAAQ,GAAK,KAC5DS,EAAOE,SAASC,IAAI,EAAG,GAAI,IAC3BH,EAAOI,OAAO,EAAG,EAAG,GACpB,IAAIC,EAAW,IAAIC,IAAcN,EAAQP,EAASc,YAClDF,EAASG,eAAgB,EACzBH,EAASI,cAAgB,IACzBJ,EAASK,oBAAqB,EAC9BL,EAASM,YAAc,EACvBN,EAASO,YAAc,GACvBP,EAASQ,cAAgBC,KAAKC,GAC9BV,EAASW,YAAa,EACtB7B,KAAKH,aAAaI,QAAQ6B,YAAYxB,EAASc,YAC/CZ,EAAOuB,KAAK,qBAAqB,SAACC,GAChCtB,EAAMuB,IAAID,EAAKtB,UACd,SAACwB,GACFC,QAAQC,IAAIF,GAEZC,QAAQC,IAAKF,EAAQG,OAASH,EAAQI,MAAQ,IAAO,eACpD,SAACC,GACFC,MAAM,4CAEM,SAAVC,IACFC,sBAAsBD,GACtBvB,EAASyB,SACTrC,EAASsC,OAAOlC,EAAOG,GAEzB4B,M,+BAIF,OACE,uBAAKI,GAAG,YAAYC,IAAK9C,KAAKH,aAAckD,MAAO,CAAE7C,MAAO,OAAQE,OAAQ,c,GA/C5CN","file":"static/js/6.ac7a941b.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, PCFSoftShadowMap, DirectionalLight } from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\nexport interface IChapter1Props {\r\n}\r\n\r\nexport interface IChapter1State {\r\n}\r\n\r\nexport default class Chapter3 extends React.Component<IChapter1Props, IChapter1State> {\r\n  constructor(props: IChapter1Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    }\r\n  }\r\n  private containerRef = React.createRef<HTMLDivElement>()\r\n  componentDidMount() {\r\n    if (this.containerRef.current) {\r\n      let width = this.containerRef.current.clientWidth;\r\n      let height = this.containerRef.current.clientHeight;\r\n      let renderer = new WebGLRenderer();\r\n      let loader = new GLTFLoader();\r\n      let scene = new Scene();\r\n      renderer.setSize(width, height);\r\n      let camera = new PerspectiveCamera(75, width / height, 0.1, 200);\r\n      camera.position.set(0, 2, -10);\r\n      camera.lookAt(0, 0, 0);\r\n      let controls = new OrbitControls(camera, renderer.domElement);\r\n      controls.enableDamping = true;\r\n      controls.dampingFactor = 0.05;\r\n      controls.screenSpacePanning = true;\r\n      controls.minDistance = 5;\r\n      controls.maxDistance = 30;\r\n      controls.maxPolarAngle = Math.PI;\r\n      controls.autoRotate = true;\r\n      this.containerRef.current.appendChild(renderer.domElement);\r\n      loader.load('./gltf/scene.gltf', (gltf) => {\r\n        scene.add(gltf.scene);\r\n      }, (loading) => {\r\n        console.log(loading);\r\n\r\n        console.log((loading.loaded / loading.total * 100) + '% loaded');\r\n      }, (error) => {\r\n        alert(\"模型加载出错\")\r\n      })\r\n      let animate = () => {\r\n        requestAnimationFrame(animate);\r\n        controls.update();\r\n        renderer.render(scene, camera)\r\n      }\r\n      animate()\r\n    }\r\n  }\r\n  public render() {\r\n    return (\r\n      <div id=\"container\" ref={this.containerRef} style={{ width: '100%', height: '100%' }}>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}